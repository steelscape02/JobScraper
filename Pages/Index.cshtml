@page
@model JobScraper.Pages.IndexModel
@{
    ViewData["Title"] = "Home page";
}

<div class="text-center">
    <h1 class="display-4">Job Listings</h1>
    <button id="updateButton">Update Table</button>

    <div style="margin: 20px 0;">
        <input type="search" name="searchInput" placeholder="Search..." size="30" required>
        <button id="searchButton">Search</button>
        <div style="margin: 20px 0; vertical-align: middle;">
            <div style="margin: 10px 0;">
                <label for="dateFilter">Oldest posted:</label>
                <input type="date" name="dateFilter" id="dateFilter" value="@DateTime.Now.AddMonths(-3).ToString("yyyy-MM-dd")" required>
            </div>
            
            <div style="margin: 10px 0;">
                <label for="wageFilter">Minimum wage:</label>
                <input id="wageChange" type="number" name="wageFilterMax" id="wageFilterMax" value="1" min="0" max="1" required>
            </div>
            
        </div>
    </div>

    <div style="max-height: 500px; overflow-y: auto;">
        <table>
            <thead>
                <tr>
                    <th>Job Title</th>
                    <th>Company</th>
                    <th>Location</th>
                    <th>Wage</th>
                    <th>Date Posted</th>
                    <th>Link</th>
                </tr>
            </thead>
            <tbody itemid="tableBody" id="tableBody">
                @foreach (var job in Model.Jobs)
                {
                    <tr>
                        <td>@job.Title</td>
                        <td>@job.Company</td>
                        <td>@job.Location</td>
                        <td>@job.Wage</td>
                        <td>@job.PostedOn</td>
                        <td><a href="@job.Url" target="_blank">View Job</a></td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
    
</div>

@section Scripts {
    <script>
        const dateInput = document.querySelector('input[name="dateFilter"]');
        const tableBody = document.getElementById("tableBody");
        const rows = tableBody.getElementsByTagName("tr");

        function findAllNumbers(input) {
            if (!input || input.trim() === "") {
                return [];
            }

            // Remove commas and then find all sequences of one or more digits
            const numberStrings = input.replace(/,/g, "").match(/\d+/g);

            if (!numberStrings) {
                return []; // Return an empty array if no numbers are found
            }

            // Convert the matched strings to integers
            return numberStrings.map(str => parseInt(str, 10));
        }

        function findMaxNumber(input) {
            const numbers = findAllNumbers(input);
            return numbers.length > 0 ? Math.max(...numbers) : null;
        }

        function filterByDate(selectedDate,rows) {
            for (let i = 0; i < rows.length; i++) {
                const dateCell = rows[i].getElementsByTagName("td")[4]; // Assuming the date is in the 5th column
                const rowDate = new Date(dateCell.textContent);
                rows[i].style.display = rowDate >= selectedDate ? "" : "none";
            }
        }

        document.onload = function() {
            tableBody.innerHTML = ''; // Show loading
        };

        document.getElementById("updateButton").addEventListener("click", async function() {
            
            tableBody.innerHTML = '<tr><td colspan="6">Loading...</td></tr>'; // Show loading
            
            try {
                const response = await fetch('/Index?handler=UpdateTable'); // Server endpoint
                if (!response.ok) {
                    throw new Error(`HTTP error! status: ${response.status}`);
                }
                const updatedData = await response.json();
                tableBody.innerHTML = ''; // Clear loading or previous data
               

                updatedData.forEach(item => {
                    const row = tableBody.insertRow();
                    const titleCell = row.insertCell();
                    const companyCell = row.insertCell();
                    const locationCell = row.insertCell();
                    const wageCell = row.insertCell();
                    const dateCell = row.insertCell();
                    const urlCell = row.insertCell();
                    titleCell.textContent = item.title;
                    companyCell.textContent = item.company;
                    locationCell.textContent = item.location;
                    wageCell.textContent = item.wage;
                    dateCell.textContent = item.postedOn;
                    urlCell.innerHTML = '<a href="' + item.url + '" target="_blank">View Job</a>';
                    if (item.wage) {
                        var maxNum = findMaxNumber(item.wage); // Find the maximum number in the wage string
                        if (maxNum > wageChange.max) {
                            wageChange.max = maxNum; 
                        }
                    }
                });
                
            } catch (error) {
                console.error('Error fetching updated data:', error);
                tableBody.innerHTML = '<tr><td colspan="6">Error loading data</td></tr>';
            }
            const selectedDate = new Date(dateInput.value);
            
            filterByDate(selectedDate,rows);

        });

        document.getElementById("searchButton").addEventListener("click", function() {
            const input = document.querySelector('input[name="searchInput"]');
            const filter = input.value.toLowerCase();
            const tableBody = document.getElementById("tableBody");
            const rows = tableBody.getElementsByTagName("tr");

            for (let i = 0; i < rows.length; i++) {
                const cells = rows[i].getElementsByTagName("td");
                let found = false;
                for (let j = 0; j < cells.length; j++) {
                    if (cells[j].textContent.toLowerCase().includes(filter)) {
                        found = true;
                        break;
                    }
                }
                rows[i].style.display = found ? "" : "none";
            }
        });

        
        dateInput.addEventListener("change", function() {
            const selectedDate = new Date(dateInput.value);
            filterByDate(selectedDate,rows);
        });
        
        wageChange.addEventListener("input", function() {
            // add date filter
            const selectedDate = new Date(dateInput.value);
            const selectedWage = parseInt(wageChange.value, 10);

            for (let i = 0; i < rows.length; i++) {
                const wageCell = rows[i].getElementsByTagName("td")[3]; 
                const dateCell = rows[i].getElementsByTagName("td")[4]; 
                const rowWage = findMaxNumber(wageCell.textContent); 
                const rowDate = new Date(dateCell.textContent);
                if (rowDate >= selectedDate){
                    rows[i].style.display = rowWage >= selectedWage ? "" : "none";
                }else{
                    continue;
                }
            }
        });
    </script>
}
